{
  "address": "0xF563f64e50C8989656995E7593A0d79f5e4Cb80F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approveProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract ILendingPoolAddressesProviderV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING_POOL",
      "outputs": [
        {
          "internalType": "contract ILendingPoolV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_APPROVE_PROXY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "flashloan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "fromToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "toToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "weights",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "adapters",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pools",
                  "type": "address[]"
                }
              ],
              "internalType": "struct RouteProxy.WeightPathInfo[][]",
              "name": "weightPathInfos",
              "type": "tuple[][]"
            }
          ],
          "internalType": "struct RouteProxy.LinearWeightPathInfo",
          "name": "linearWeightPathInfo",
          "type": "tuple"
        }
      ],
      "name": "linearSplitMultiHopMultiSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "output",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            }
          ],
          "internalType": "struct RouteProxy.WeightPathInfo[]",
          "name": "weightPathInfos",
          "type": "tuple[]"
        }
      ],
      "name": "multiHopMultiSwap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "outputs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct RouteProxy.PathInfo[]",
          "name": "pathInfos",
          "type": "tuple[]"
        }
      ],
      "name": "multiHopSingleSwap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "outputs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "fromToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "toToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "weights",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "adapters",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "pools",
                  "type": "address[]"
                }
              ],
              "internalType": "struct RouteProxy.WeightPathInfo[][]",
              "name": "weightPathInfos",
              "type": "tuple[][]"
            }
          ],
          "internalType": "struct RouteProxy.LinearWeightPathInfo",
          "name": "linearWeightPathInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "fromToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "toToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "adapter",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                }
              ],
              "internalType": "struct RouteProxy.PathInfo[]",
              "name": "pathInfos",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct RouteProxy.FlashLoanDes[]",
          "name": "flashDes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "shieldSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "output",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "pools",
              "type": "address[]"
            }
          ],
          "internalType": "struct RouteProxy.WeightPathInfo",
          "name": "weightPathInfo",
          "type": "tuple"
        }
      ],
      "name": "singleHopMultiSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "output",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5203103b03da58dd1567c790e6c6bf8015605947cfb4f8b17b5035c994d4e2b3",
  "receipt": {
    "to": null,
    "from": "0x64478Fc1bc6726caf1D0366dC61eF44E7bD3C1bc",
    "contractAddress": "0xF563f64e50C8989656995E7593A0d79f5e4Cb80F",
    "transactionIndex": 3,
    "gasUsed": "4189925",
    "logsBloom": "0x
    "blockHash": "0xb21f809488317f1a5c2950b522c91fc0777b14c5293e75b530dca3f3bb93a6a8",
    "transactionHash": "0x5203103b03da58dd1567c790e6c6bf8015605947cfb4f8b17b5035c994d4e2b3",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27571055,
        "transactionHash": "0x5203103b03da58dd1567c790e6c6bf8015605947cfb4f8b17b5035c994d4e2b3",
        "address": "0xF563f64e50C8989656995E7593A0d79f5e4Cb80F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000064478fc1bc6726caf1d0366dc61ef44e7bd3c1bc"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb21f809488317f1a5c2950b522c91fc0777b14c5293e75b530dca3f3bb93a6a8"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 27571055,
        "transactionHash": "0x5203103b03da58dd1567c790e6c6bf8015605947cfb4f8b17b5035c994d4e2b3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000064478fc1bc6726caf1d0366dc61ef44e7bd3c1bc",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002084079908e3380000000000000000000000000000000000000000000000000108f3a8059fe49720000000000000000000000000000000000000000000022665367c509d001b8ad0000000000000000000000000000000000000000000000000e86fa06c97015f200000000000000000000000000000000000000000000226655700583608fec2d",
        "logIndex": 10,
        "blockHash": "0xb21f809488317f1a5c2950b522c91fc0777b14c5293e75b530dca3f3bb93a6a8"
      }
    ],
    "blockNumber": 27571055,
    "cumulativeGasUsed": "4394197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4E63E5a2d3d65c9c4f592Ef6d97037f4d6cd133",
    "0x178113104fEcbcD7fF8669a0150721e231F0FD4B"
  ],
  "numDeployments": 1,
  "solcInputHash": "36479a67904949b8fba17c4401077ab8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approveProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"OrderHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProviderV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPoolV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"flashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"internalType\":\"struct RouteProxy.WeightPathInfo[][]\",\"name\":\"weightPathInfos\",\"type\":\"tuple[][]\"}],\"internalType\":\"struct RouteProxy.LinearWeightPathInfo\",\"name\":\"linearWeightPathInfo\",\"type\":\"tuple\"}],\"name\":\"linearSplitMultiHopMultiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"internalType\":\"struct RouteProxy.WeightPathInfo[]\",\"name\":\"weightPathInfos\",\"type\":\"tuple[]\"}],\"name\":\"multiHopMultiSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"outputs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct RouteProxy.PathInfo[]\",\"name\":\"pathInfos\",\"type\":\"tuple[]\"}],\"name\":\"multiHopSingleSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"outputs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"internalType\":\"struct RouteProxy.WeightPathInfo[][]\",\"name\":\"weightPathInfos\",\"type\":\"tuple[][]\"}],\"internalType\":\"struct RouteProxy.LinearWeightPathInfo\",\"name\":\"linearWeightPathInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct RouteProxy.PathInfo[]\",\"name\":\"pathInfos\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RouteProxy.FlashLoanDes[]\",\"name\":\"flashDes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"shieldSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"internalType\":\"struct RouteProxy.WeightPathInfo\",\"name\":\"weightPathInfo\",\"type\":\"tuple\"}],\"name\":\"singleHopMultiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"fortoon21\",\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"This function must be called only be the LENDING_POOL and takes care of repaying active debt positions, migrating collateral and incurring new V2 debt token debt.\",\"params\":{\"amounts\":\"The array of flash loaned asset amounts used to repay debts.\",\"assets\":\"The array of flash loaned assets used to repay debts.\",\"initiator\":\"The address that initiated the flash loan, unused.\",\"params\":\"The byte array containing, in this case, the arrays of aTokens and aTokenAmounts.\",\"premiums\":\"The array of premiums incurred as additional debts.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw asset.\",\"params\":{\"_assetAddress\":\"Asset to be withdrawn.\"}}},\"title\":\"RouteProxy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Split trading Need to wrap matic address in the following pool convention\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartRoute/proxies/RouteProxy.sol\":\"RouteProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SmartRoute/ApproveProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {IApprove} from \\\"../intf/IApprove.sol\\\";\\nimport {InitializableOwnable} from \\\"../lib/InitializableOwnable.sol\\\";\\n\\ninterface IApproveProxy {\\n    function isAllowedProxy(address _proxy) external view returns (bool);\\n\\n    function claimTokens(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\\n/**\\n * @title ApproveProxy\\n * @author DODO Breeder\\n *\\n * @notice Allow different version dodoproxy to claim from Approve\\n */\\ncontract ApproveProxy is InitializableOwnable {\\n    // ============ Storage ============\\n    mapping(address => bool) public _IS_ALLOWED_PROXY_;\\n    address public _PENDING_ADD_PROXY_;\\n    address public immutable _APPROVE_;\\n\\n    constructor(address approve) {\\n        _APPROVE_ = approve;\\n    }\\n\\n    function init(address owner, address[] memory proxies) external {\\n        initOwner(owner);\\n        for (uint256 i = 0; i < proxies.length; i++) _IS_ALLOWED_PROXY_[proxies[i]] = true;\\n    }\\n\\n    function unlockAddProxy(address newProxy) public onlyOwner {\\n        _PENDING_ADD_PROXY_ = newProxy;\\n    }\\n\\n    function lockAddProxy() public onlyOwner {\\n        _PENDING_ADD_PROXY_ = address(0);\\n    }\\n\\n    function addProxy() external onlyOwner {\\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_PROXY_] = true;\\n        lockAddProxy();\\n    }\\n\\n    function removeProxy(address oldProxy) public onlyOwner {\\n        _IS_ALLOWED_PROXY_[oldProxy] = false;\\n    }\\n\\n    function claimTokens(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(_IS_ALLOWED_PROXY_[msg.sender], \\\"ApproveProxy:Access restricted\\\");\\n        IApprove(_APPROVE_).claimTokens(token, from, to, amount);\\n    }\\n\\n    function isAllowedProxy(address _proxy) external view returns (bool) {\\n        return _IS_ALLOWED_PROXY_[_proxy];\\n    }\\n}\\n\",\"keccak256\":\"0x2839e7d50b54824efe22dc9d5f2fb17ae74f7af54c269eecd3f0e2bcefdc1a0f\",\"license\":\"UNLICENSED\"},\"contracts/SmartRoute/intf/IFlashLoanReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.15;\\n\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport {ILendingPoolV2} from \\\"./ILendingPoolV2.sol\\\";\\n\\n/**\\n * @title IFlashLoanReceiverV2 interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiverV2 {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProviderV2);\\n\\n    function LENDING_POOL() external view returns (ILendingPoolV2);\\n}\\n\",\"keccak256\":\"0x83eb75dcaa9fc7f25055534e335eef26f5fed003ddb77da2b74fee0023e43c52\",\"license\":\"agpl-3.0\"},\"contracts/SmartRoute/intf/ILendingPoolAddressesProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProviderV2 {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x4f070ee2d11feecb7108305f313607f6f6c799575fa5c5d57447ddaf8192d020\",\"license\":\"agpl-3.0\"},\"contracts/SmartRoute/intf/ILendingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.15;\\n\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport {DataTypes} from \\\"../../lib/DataTypes.sol\\\";\\n\\ninterface ILendingPoolV2 {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL() external returns (uint256);\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the fromle aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user from will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the fromle debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user from will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower fromse debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n        external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8629fa99a51bb1915836dc4b42659064b7c21a8af18fde95be2cf1430b71a572\",\"license\":\"agpl-3.0\"},\"contracts/SmartRoute/intf/IRouterAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface Routing {\\n    function getAmountOut(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        address pool\\n    ) external view returns (uint256 _output);\\n\\n    function swapExactIn(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        address pool,\\n        address to\\n    ) external returns (uint256 _output);\\n\\n    function factory(address pool) external returns (address);\\n}\\n\\nabstract contract IRouterAdapter is ReentrancyGuard, Routing, Ownable {\\n    event setWMATIC(address wMatic);\\n    event unsetWMATIC(address wMatic);\\n    event changeWMATIC(address factory, address wMatic);\\n    mapping(address => uint8) public isMatic;\\n    mapping(address => address) public factoryToWMatic;\\n\\n    function checkWMatic(address token) public view returns (bool) {\\n        return isMatic[token] == 1;\\n    }\\n\\n    function getWMatic(address factory) public view returns (address) {\\n        return factoryToWMatic[factory];\\n    }\\n\\n    function changeWMatic(address[] memory factories, address[] memory wMatics) public onlyOwner {\\n        _changeWMatic(factories, wMatics);\\n    }\\n\\n    function _setWMatic(address wMatic) internal {\\n        if (isMatic[wMatic] == 0) {\\n            isMatic[wMatic] = 1;\\n            emit setWMATIC(wMatic);\\n        }\\n    }\\n\\n    function _unsetWMatic(address wMatic) internal {\\n        if (isMatic[wMatic] == 1) {\\n            isMatic[wMatic] = 0;\\n            emit unsetWMATIC(wMatic);\\n        }\\n    }\\n\\n    function _changeWMatic(address[] memory factories, address[] memory wMatics) internal {\\n        for (uint256 i; i < wMatics.length; i++) {\\n            if (wMatics[i] == address(0)) {\\n                _unsetWMatic(wMatics[i]);\\n            } else {\\n                _setWMatic(wMatics[i]);\\n            }\\n            factoryToWMatic[factories[i]] = wMatics[i];\\n            emit changeWMATIC(factories[i], wMatics[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfe862806c5b25bbb5fbf4eabde12d8db402bc2c788c1e0c2ae2eb5dea26b4ee\",\"license\":\"UNLICENSED\"},\"contracts/SmartRoute/proxies/FlashLoanReceiverBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"../../lib/SafeMath.sol\\\";\\nimport {IFlashLoanReceiverV2} from \\\"../intf/IFlashLoanReceiverV2.sol\\\";\\nimport {ILendingPoolAddressesProviderV2} from \\\"../intf/ILendingPoolAddressesProviderV2.sol\\\";\\nimport {ILendingPoolV2} from \\\"../intf/ILendingPoolV2.sol\\\";\\nimport \\\"../../lib/Withdrawable.sol\\\";\\n\\n/** \\n    !!!\\n    Never keep funds permanently on your FlashLoanReceiverBase contract as they could be \\n    exposed to a 'griefing' attack, where the stored funds are used by an attacker.\\n    !!!\\n */\\nabstract contract FlashLoanReceiverBaseV2 is IFlashLoanReceiverV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    ILendingPoolAddressesProviderV2 public immutable override ADDRESSES_PROVIDER;\\n    ILendingPoolV2 public immutable override LENDING_POOL;\\n\\n    constructor(address provider) {\\n        ADDRESSES_PROVIDER = ILendingPoolAddressesProviderV2(provider);\\n        LENDING_POOL = ILendingPoolV2(ILendingPoolAddressesProviderV2(provider).getLendingPool());\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xe1d4a471daeee5ebf12f21e098b908b675cc206cb7c2a1a275451549cb711e1a\",\"license\":\"agpl-3.0\"},\"contracts/SmartRoute/proxies/RouteProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {IApproveProxy} from \\\"../ApproveProxy.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IWETH} from \\\"../../intf/IWETH.sol\\\";\\nimport {SafeMath} from \\\"../../lib/SafeMath.sol\\\";\\nimport {Withdrawable} from \\\"../../lib/Withdrawable.sol\\\";\\nimport {UniERC20} from \\\"../../lib/UniERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IRouterAdapter} from \\\"../intf/IRouterAdapter.sol\\\";\\nimport {FlashLoanReceiverBaseV2} from \\\"./FlashLoanReceiverBaseV2.sol\\\";\\nimport {ILendingPoolAddressesProviderV2} from \\\"../intf/ILendingPoolAddressesProviderV2.sol\\\";\\nimport {ILendingPoolV2} from \\\"../intf/ILendingPoolV2.sol\\\";\\n\\n/**\\n * @title RouteProxy\\n * @author fortoon21\\n *\\n * @notice Split trading\\n * Need to wrap matic address in the following pool convention\\n */\\ncontract RouteProxy is FlashLoanReceiverBaseV2, Withdrawable {\\n    using SafeMath for uint256;\\n    using UniERC20 for IERC20;\\n\\n    // ============ Storage ============\\n\\n    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address constant _WMATIC_ADDRESS_=0xb685400156cF3CBE8725958DeAA61436727A30c3;\\n    address public immutable _APPROVE_PROXY_;\\n\\n    struct PathInfo {\\n        address fromToken;\\n        uint256 amountIn;\\n        address toToken;\\n        address to;\\n        address adapter;\\n        address pool;\\n    }\\n\\n    struct WeightPathInfo {\\n        address fromToken;\\n        uint256 amountIn;\\n        address toToken;\\n        address to;\\n        uint256[] weights;\\n        address[] adapters;\\n        address[] pools;\\n    }\\n\\n    struct LinearWeightPathInfo {\\n        address fromToken;\\n        uint256 amountIn;\\n        address toToken;\\n        address to;\\n        uint256[] weights;\\n        WeightPathInfo[][] weightPathInfos;\\n    }\\n\\n    struct FlashLoanDes {\\n        address asset;\\n        uint256 amountIn;\\n        PathInfo[] pathInfos;\\n    }\\n\\n    // ============ Events ============\\n\\n    event OrderHistory(\\n        address fromToken,\\n        address toToken,\\n        address sender,\\n        uint256 fromAmount,\\n        uint256 returnAmount\\n    );\\n\\n    // ============ Modifiers ============\\n\\n    modifier checkDeadline(uint256 deadLine) {\\n        require(deadLine >= block.timestamp, \\\"RouteProxy: EXPIRED\\\");\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    constructor(address approveProxy, address _addressProvider)\\n        FlashLoanReceiverBaseV2(_addressProvider)\\n    {\\n        _APPROVE_PROXY_ = approveProxy;\\n    }\\n\\n    /**\\n     * @dev This function must be called only be the LENDING_POOL and takes care of repaying\\n     * active debt positions, migrating collateral and incurring new V2 debt token debt.\\n     *\\n     * @param assets The array of flash loaned assets used to repay debts.\\n     * @param amounts The array of flash loaned asset amounts used to repay debts.\\n     * @param premiums The array of premiums incurred as additional debts.\\n     * @param initiator The address that initiated the flash loan, unused.\\n     * @param params The byte array containing, in this case, the arrays of aTokens and aTokenAmounts.\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        //\\n        // This contract now has the funds requested.\\n        // Your logic goes here.\\n        //\\n\\n        for(uint256 i; i<assets.length;i++){\\n          if(assets[i]==_WMATIC_ADDRESS_){\\n            IWETH(_WMATIC_ADDRESS_).withdraw(amounts[i]);\\n          }\\n        }\\n\\n        PathInfo[] memory pathInfos = abi.decode(params, (PathInfo[]));\\n        pathInfos[pathInfos.length - 1].to = address(this);\\n        _multiHopSingleSwap(pathInfos);\\n        \\n\\n        // At the end of your logic above, this contract owes\\n        // the flashloaned amounts + premiums.\\n        // Therefore ensure your contract has enough to repay\\n        // these amounts.\\n\\n        // Approve the LendingPool contract allowance to *pull* the owed amount\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 amountOwing = amounts[i].add(premiums[i]);\\n            if(assets[i]==_WMATIC_ADDRESS_){\\n              IWETH(_WMATIC_ADDRESS_).deposit{value:amountOwing}();\\n            }\\n            IERC20(assets[i]).approve(address(LENDING_POOL), amountOwing);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _flashloan(\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        bytes memory params\\n    ) internal {\\n        address receiverAddress = address(this);\\n\\n        address onBehalfOf = address(this);\\n        uint16 referralCode = 0;\\n\\n        uint256[] memory modes = new uint256[](assets.length);\\n\\n        // 0 = no debt (flash), 1 = stable, 2 = variable\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            modes[i] = 0;\\n        }\\n\\n        LENDING_POOL.flashLoan(\\n            receiverAddress,\\n            assets,\\n            amounts,\\n            modes,\\n            onBehalfOf,\\n            params,\\n            referralCode\\n        );\\n    }\\n\\n    /*\\n     *  Flash multiple assets\\n     */\\n    function flashloan(address[] memory assets, uint256[] memory amounts) public onlyOwner {\\n        _flashloan(assets, amounts, \\\"\\\");\\n    }\\n\\n    /*\\n     *  Flash loan 1000000000000000000 wei (1 ether) worth of `_asset`\\n     */\\n    function _flashloan(\\n        address _asset,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        address[] memory assets = new address[](1);\\n        assets[0] = _asset;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        _flashloan(assets, amounts, data);\\n    }\\n\\n    function _multiHopSingleSwap(PathInfo[] memory pathInfos)\\n        internal\\n        returns (uint256[] memory outputs)\\n    {\\n        uint256 pathInfoNum = pathInfos.length;\\n        outputs = _calcMultiHopSingleSwap(pathInfos);\\n        address from;\\n        address to;\\n        for (uint256 i = 1; i < pathInfoNum; i++) {\\n            // define midtoken address, ETH -> WETH address\\n            if (pathInfos[i - 1].fromToken == address(0)) {\\n                _checkDeposit(pathInfos[i - 1].adapter, pathInfos[i - 1].pool, outputs[i - 1]);\\n            }\\n\\n            from = pathInfos[i - 1].fromToken == address(0)\\n                ? _convertToMatic(pathInfos[i - 1].adapter, pathInfos[i - 1].pool)\\n                : pathInfos[i - 1].fromToken;\\n\\n            to = pathInfos[i - 1].toToken == address(0)\\n                ? _convertToMatic(pathInfos[i - 1].adapter, pathInfos[i - 1].pool)\\n                : pathInfos[i - 1].toToken;\\n\\n            IERC20(from).transfer(pathInfos[i - 1].pool, outputs[i - 1]);\\n\\n            IRouterAdapter(pathInfos[i - 1].adapter).swapExactIn(\\n                from,\\n                outputs[i - 1],\\n                to,\\n                pathInfos[i - 1].pool,\\n                address(this)\\n            );\\n            if (pathInfos[i - 1].toToken == address(0)) {\\n                _checkWithdraw(pathInfos[i - 1].adapter, pathInfos[i - 1].pool, outputs[i]);\\n            }\\n        }\\n\\n        from = pathInfos[pathInfoNum - 1].fromToken == address(0)\\n            ? _convertToMatic(pathInfos[pathInfoNum - 1].adapter, pathInfos[pathInfoNum - 1].pool)\\n            : pathInfos[pathInfoNum - 1].fromToken;\\n        to = pathInfos[pathInfoNum - 1].toToken == address(0)\\n            ? _convertToMatic(pathInfos[pathInfoNum - 1].adapter, pathInfos[pathInfoNum - 1].pool)\\n            : pathInfos[pathInfoNum - 1].toToken;\\n\\n        if (pathInfos[pathInfoNum - 1].fromToken == address(0)) {\\n            _checkDeposit(\\n                pathInfos[pathInfoNum - 1].adapter,\\n                pathInfos[pathInfoNum - 1].pool,\\n                outputs[pathInfoNum]\\n            );\\n        }\\n\\n        IERC20(from).transfer(pathInfos[pathInfoNum - 1].pool, outputs[pathInfoNum - 1]);\\n\\n        IRouterAdapter(pathInfos[pathInfoNum - 1].adapter).swapExactIn(\\n            from,\\n            outputs[pathInfoNum - 1],\\n            to,\\n            pathInfos[pathInfoNum - 1].pool,\\n            pathInfos[pathInfoNum - 1].to\\n        );\\n\\n        _checkWithdraw(\\n            pathInfos[pathInfoNum - 1].adapter,\\n            pathInfos[pathInfoNum - 1].toToken,\\n            outputs[pathInfoNum]\\n        );\\n    }\\n\\n    function _convertToMatic(address adapter, address pool) internal returns (address) {\\n        return IRouterAdapter(adapter).getWMatic(IRouterAdapter(adapter).factory(pool));\\n    }\\n\\n    function _calcMultiHopSingleSwap(PathInfo[] memory pathInfos)\\n        internal\\n        returns (uint256[] memory outputs)\\n    {\\n        uint256 pathInfoNum = pathInfos.length;\\n        outputs = new uint256[](pathInfoNum + 1);\\n        outputs[0] = pathInfos[0].amountIn;\\n\\n        uint256 amountIn;\\n\\n        for (uint256 i = 1; i < pathInfoNum; i++) {\\n            // define midtoken address, ETH -> WETH address\\n            require(\\n                pathInfos[i - 1].toToken == pathInfos[i].fromToken,\\n                \\\"Not valid multihopSingleSwap Path\\\"\\n            );\\n            require(pathInfos[i - 1].fromToken != pathInfos[i - 1].toToken, \\\"from to are the same\\\");\\n            amountIn = outputs[i - 1];\\n\\n            outputs[i] = IRouterAdapter(pathInfos[i - 1].adapter).getAmountOut(\\n                pathInfos[i - 1].fromToken == address(0)\\n                    ? _convertToMatic(pathInfos[i - 1].adapter, pathInfos[i - 1].pool)\\n                    : pathInfos[i - 1].fromToken,\\n                amountIn,\\n                pathInfos[i - 1].toToken == address(0)\\n                    ? _convertToMatic(pathInfos[i - 1].adapter, pathInfos[i - 1].pool)\\n                    : pathInfos[i - 1].toToken,\\n                pathInfos[i - 1].pool\\n            );\\n        }\\n\\n        require(\\n            pathInfos[pathInfoNum - 1].fromToken != pathInfos[pathInfoNum - 1].toToken,\\n            \\\"from to are the same\\\"\\n        );\\n        amountIn = outputs[pathInfoNum - 1];\\n\\n        outputs[pathInfoNum] = IRouterAdapter(pathInfos[pathInfoNum - 1].adapter).getAmountOut(\\n            pathInfos[pathInfoNum - 1].fromToken == address(0)\\n                ? _convertToMatic(\\n                    pathInfos[pathInfoNum - 1].adapter,\\n                    pathInfos[pathInfoNum - 1].pool\\n                )\\n                : pathInfos[pathInfoNum - 1].fromToken,\\n            amountIn,\\n            pathInfos[pathInfoNum - 1].toToken == address(0)\\n                ? _convertToMatic(\\n                    pathInfos[pathInfoNum - 1].adapter,\\n                    pathInfos[pathInfoNum - 1].pool\\n                )\\n                : pathInfos[pathInfoNum - 1].toToken,\\n            pathInfos[pathInfoNum - 1].pool\\n        );\\n    }\\n\\n    function _singleHopMultiSwap(WeightPathInfo memory weightPathInfo)\\n        internal\\n        returns (uint256 output)\\n    {\\n        require(\\n            weightPathInfo.weights.length == weightPathInfo.adapters.length &&\\n                weightPathInfo.weights.length == weightPathInfo.pools.length,\\n            \\\"Invalid input length\\\"\\n        );\\n        uint256 totalWeight;\\n        uint256 poolNum = weightPathInfo.weights.length;\\n        for (uint256 i; i < poolNum; i++) {\\n            totalWeight += weightPathInfo.weights[i];\\n        }\\n\\n        uint256 rest = weightPathInfo.amountIn;\\n        address from;\\n        address to;\\n        for (uint256 i; i < poolNum; i++) {\\n            uint256 partAmountIn = i == poolNum - 1\\n                ? rest\\n                : weightPathInfo.amountIn.mul(weightPathInfo.weights[i]).div(totalWeight);\\n            rest = rest.sub(partAmountIn);\\n            if (weightPathInfo.fromToken == address(0)) {\\n                _checkDeposit(weightPathInfo.adapters[i], weightPathInfo.pools[i], partAmountIn);\\n            }\\n            from = weightPathInfo.fromToken == address(0)\\n                ? _convertToMatic(weightPathInfo.adapters[i], weightPathInfo.pools[i])\\n                : weightPathInfo.fromToken;\\n            IERC20(from).transfer(weightPathInfo.pools[i], partAmountIn);\\n            to = weightPathInfo.toToken == address(0)\\n                ? _convertToMatic(weightPathInfo.adapters[i], weightPathInfo.pools[i])\\n                : weightPathInfo.toToken;\\n            uint256 _output = IRouterAdapter(weightPathInfo.adapters[i]).swapExactIn(\\n                from,\\n                partAmountIn,\\n                to,\\n                weightPathInfo.pools[i],\\n                weightPathInfo.to\\n            );\\n            if (weightPathInfo.toToken == address(0)) {\\n                _checkWithdraw(weightPathInfo.adapters[i], weightPathInfo.pools[i], _output);\\n            }\\n            output += _output;\\n        }\\n    }\\n\\n    function _calcSingleHopMultiSwap(WeightPathInfo memory weightPathInfo)\\n        internal\\n        returns (uint256 output)\\n    {\\n        require(\\n            weightPathInfo.weights.length == weightPathInfo.adapters.length &&\\n                weightPathInfo.weights.length == weightPathInfo.pools.length,\\n            \\\"Invalid input length\\\"\\n        );\\n\\n        uint256 totalWeight;\\n        uint256 poolNum = weightPathInfo.weights.length;\\n        for (uint256 i; i < poolNum; i++) {\\n            totalWeight += weightPathInfo.weights[i];\\n        }\\n\\n        uint256 rest = weightPathInfo.amountIn;\\n        for (uint256 i; i < poolNum; i++) {\\n            uint256 partAmountIn = i == poolNum - 1\\n                ? rest\\n                : weightPathInfo.amountIn.mul(weightPathInfo.weights[i]).div(totalWeight);\\n            rest = rest.sub(partAmountIn);\\n\\n            output += IRouterAdapter(weightPathInfo.adapters[i]).getAmountOut(\\n                weightPathInfo.fromToken == address(0)\\n                    ? _convertToMatic(weightPathInfo.adapters[i], weightPathInfo.pools[i])\\n                    : weightPathInfo.fromToken,\\n                partAmountIn,\\n                weightPathInfo.toToken == address(0)\\n                    ? _convertToMatic(weightPathInfo.adapters[i], weightPathInfo.pools[i])\\n                    : weightPathInfo.toToken,\\n                weightPathInfo.pools[i]\\n            );\\n        }\\n    }\\n\\n    function _multiHopMultiSwap(WeightPathInfo[] memory weightPathInfos)\\n        internal\\n        returns (uint256[] memory outputs)\\n    {\\n        outputs = new uint256[](weightPathInfos.length + 1);\\n        outputs[0] = weightPathInfos[0].amountIn;\\n        for (uint256 i = 1; i < weightPathInfos.length; i++) {\\n            require(\\n                weightPathInfos[i - 1].toToken == weightPathInfos[i].fromToken,\\n                \\\"Not valid multihop Path\\\"\\n            );\\n            if (i != weightPathInfos.length - 1) {\\n                weightPathInfos[i].to = address(this);\\n            }\\n            outputs[i] = _singleHopMultiSwap(weightPathInfos[i - 1]);\\n            weightPathInfos[i].amountIn = outputs[i];\\n        }\\n        outputs[outputs.length - 1] = _singleHopMultiSwap(\\n            weightPathInfos[weightPathInfos.length - 1]\\n        );\\n    }\\n\\n    function _calcMultiHopMultiSwap(WeightPathInfo[] memory weightPathInfos)\\n        internal\\n        returns (uint256[] memory outputs)\\n    {\\n        outputs = new uint256[](weightPathInfos.length + 1);\\n        outputs[0] = weightPathInfos[0].amountIn;\\n        for (uint256 i = 1; i < weightPathInfos.length; i++) {\\n            require(\\n                weightPathInfos[i - 1].toToken == weightPathInfos[i].fromToken,\\n                \\\"Not valid multihop Path\\\"\\n            );\\n            if (i != weightPathInfos.length - 1) {\\n                weightPathInfos[i].to = address(this);\\n            }\\n            outputs[i] = _calcSingleHopMultiSwap(weightPathInfos[i - 1]);\\n            weightPathInfos[i].amountIn = outputs[i];\\n        }\\n        outputs[outputs.length - 1] = _calcSingleHopMultiSwap(\\n            weightPathInfos[weightPathInfos.length - 1]\\n        );\\n    }\\n\\n    function _linearSplitMultiHopMultiSwap(LinearWeightPathInfo memory linearWeightPathInfo)\\n        internal\\n        returns (uint256 output)\\n    {\\n        require(\\n            linearWeightPathInfo.weights.length == linearWeightPathInfo.weightPathInfos.length,\\n            \\\"Invalid input length\\\"\\n        );\\n        uint256 totalWeight;\\n        uint256 splitNum = linearWeightPathInfo.weights.length;\\n        for (uint256 i; i < splitNum; i++) {\\n            totalWeight += linearWeightPathInfo.weights[i];\\n        }\\n\\n        uint256 rest = linearWeightPathInfo.amountIn;\\n        for (uint256 i; i < splitNum; i++) {\\n            uint256 hopNum = linearWeightPathInfo.weightPathInfos[i].length;\\n            require(\\n                linearWeightPathInfo.weightPathInfos[i][hopNum - 1].toToken ==\\n                    linearWeightPathInfo.toToken,\\n                \\\"Not valid linear toToken\\\"\\n            );\\n            require(\\n                linearWeightPathInfo.weightPathInfos[i][0].fromToken ==\\n                    linearWeightPathInfo.fromToken,\\n                \\\"Not valid linear fromToken\\\"\\n            );\\n\\n            uint256 partAmountIn = i == splitNum - 1\\n                ? rest\\n                : linearWeightPathInfo.amountIn.mul(linearWeightPathInfo.weights[i]).div(\\n                    totalWeight\\n                );\\n            rest = rest.sub(partAmountIn);\\n            linearWeightPathInfo.weightPathInfos[i][0].amountIn = partAmountIn;\\n            uint256[] memory outputs = _multiHopMultiSwap(linearWeightPathInfo.weightPathInfos[i]);\\n            output += outputs[outputs.length - 1];\\n        }\\n    }\\n\\n    function _calcLinearSplitMultiHopMultiSwap(LinearWeightPathInfo memory linearWeightPathInfo)\\n        internal\\n        returns (uint256 output)\\n    {\\n        require(\\n            linearWeightPathInfo.weights.length == linearWeightPathInfo.weightPathInfos.length,\\n            \\\"Invalid input length\\\"\\n        );\\n        uint256 totalWeight;\\n        uint256 splitNum = linearWeightPathInfo.weights.length;\\n        for (uint256 i; i < splitNum; i++) {\\n            totalWeight += linearWeightPathInfo.weights[i];\\n        }\\n\\n        uint256 rest = linearWeightPathInfo.amountIn;\\n        for (uint256 i; i < splitNum; i++) {\\n            uint256 hopNum = linearWeightPathInfo.weightPathInfos[i].length;\\n            require(\\n                linearWeightPathInfo.weightPathInfos[i][hopNum - 1].toToken ==\\n                    linearWeightPathInfo.toToken,\\n                \\\"Not valid linear toToken\\\"\\n            );\\n            require(\\n                linearWeightPathInfo.weightPathInfos[i][0].fromToken ==\\n                    linearWeightPathInfo.fromToken,\\n                \\\"Not valid linear fromToken\\\"\\n            );\\n\\n            uint256 partAmountIn = i == splitNum - 1\\n                ? rest\\n                : linearWeightPathInfo.amountIn.mul(linearWeightPathInfo.weights[i]).div(\\n                    totalWeight\\n                );\\n            rest = rest.sub(partAmountIn);\\n            linearWeightPathInfo.weightPathInfos[i][0].amountIn = partAmountIn;\\n            uint256[] memory outputs = _calcMultiHopMultiSwap(\\n                linearWeightPathInfo.weightPathInfos[i]\\n            );\\n            output += outputs[outputs.length - 1];\\n        }\\n    }\\n\\n    function multiHopSingleSwap(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        PathInfo[] calldata pathInfos\\n    ) public returns (uint256[] memory outputs) {\\n        _deposit(msg.sender, fromToken, amountIn);\\n        require(\\n            pathInfos[0].fromToken == fromToken &&\\n                pathInfos[0].amountIn == amountIn &&\\n                pathInfos[pathInfos.length - 1].toToken == toToken,\\n            \\\"not same input\\\"\\n        );\\n        return _multiHopSingleSwap(pathInfos);\\n    }\\n\\n    function singleHopMultiSwap(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        WeightPathInfo calldata weightPathInfo\\n    ) public returns (uint256 output) {\\n        _deposit(msg.sender, fromToken, amountIn);\\n        require(\\n            weightPathInfo.fromToken == fromToken &&\\n                weightPathInfo.amountIn == amountIn &&\\n                weightPathInfo.toToken == toToken,\\n            \\\"not same input\\\"\\n        );\\n        return _singleHopMultiSwap(weightPathInfo);\\n    }\\n\\n    function multiHopMultiSwap(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        WeightPathInfo[] calldata weightPathInfos\\n    ) public returns (uint256[] memory outputs) {\\n        _deposit(msg.sender, fromToken, amountIn);\\n        require(\\n            weightPathInfos[0].fromToken == fromToken &&\\n                weightPathInfos[0].amountIn == amountIn &&\\n                weightPathInfos[weightPathInfos.length - 1].toToken == toToken,\\n            \\\"not same input\\\"\\n        );\\n        return _multiHopMultiSwap(weightPathInfos);\\n    }\\n\\n    function linearSplitMultiHopMultiSwap(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        LinearWeightPathInfo calldata linearWeightPathInfo\\n    ) public returns (uint256 output) {\\n        _deposit(msg.sender, fromToken, amountIn);\\n        require(\\n            linearWeightPathInfo.amountIn == amountIn &&\\n                linearWeightPathInfo.fromToken == fromToken &&\\n                linearWeightPathInfo.toToken == toToken,\\n            \\\"not same input\\\"\\n        );\\n        output = _linearSplitMultiHopMultiSwap(linearWeightPathInfo);\\n    }\\n\\n    // multiswap is weighted swap for multi swap sequence\\n\\n    /* \\n     50%   A->B                B->C\\n        16% -> sushiswap    50% -> quickswap\\n        24% -> uniswapV3    50% -> uniswap\\n        60% -> uniswapV2\\n\\n     50% A->C\\n        100% -> uniswapV2 \\n\\n\\n    calculate cyclic arbitrage\\n    100%  *->C->A->* if this cycle profits more than premiums of flashloan?\\n    executes and transfer the profits to trader\\n\\n    */\\n\\n    function shieldSwap(\\n        address fromToken,\\n        uint256 amountIn,\\n        address toToken,\\n        LinearWeightPathInfo memory linearWeightPathInfo,\\n        FlashLoanDes[] memory flashDes,\\n        uint256 minReturnAmount,\\n        uint256 deadLine\\n    ) external payable checkDeadline(deadLine) returns (uint256 output) {\\n        require(minReturnAmount > 0, \\\"minReturn should be larger than 0\\\");\\n\\n        _deposit(msg.sender, fromToken, amountIn);\\n        \\n        require(\\n            linearWeightPathInfo.amountIn == amountIn &&\\n                linearWeightPathInfo.fromToken == fromToken &&\\n                linearWeightPathInfo.toToken == toToken,\\n            \\\"not same input\\\"\\n        );\\n        output = _linearSplitMultiHopMultiSwap(linearWeightPathInfo);\\n        \\n\\n        for (uint256 i; i < flashDes.length; i++) {\\n            require(\\n                flashDes[i].pathInfos[0].amountIn == flashDes[i].amountIn,\\n                \\\"flashloan amountIn not match\\\"\\n            );\\n            require(\\n                flashDes[i].pathInfos[0].fromToken == flashDes[i].asset &&\\n                    flashDes[i].asset ==\\n                    flashDes[i].pathInfos[flashDes[i].pathInfos.length - 1].toToken,\\n                \\\"flashloan from to assets not match\\\"\\n            );\\n            uint256[] memory outputs = _calcMultiHopSingleSwap(flashDes[i].pathInfos);\\n            if (\\n                outputs[outputs.length - 1] >\\n                flashDes[i].amountIn.mul(10000 + LENDING_POOL.FLASHLOAN_PREMIUM_TOTAL()).div(10000)\\n            ) {\\n                _flashloan(\\n                    flashDes[i].asset,\\n                    flashDes[i].amountIn,\\n                    abi.encode(flashDes[i].pathInfos)\\n                );\\n\\n                if (toToken == flashDes[i].asset) {\\n                    output += IERC20(flashDes[i].asset).uniBalanceOf(address(this));\\n                }\\n                IERC20(flashDes[i].asset).uniTransfer(\\n                    msg.sender,\\n                    IERC20(flashDes[i].asset).uniBalanceOf(address(this))\\n                );\\n            }\\n        }\\n\\n        require(output >= minReturnAmount, \\\"DODORouteProxy: Return amount is not enough\\\");\\n\\n        emit OrderHistory(fromToken, toToken, msg.sender, amountIn, output);\\n    }\\n\\n    function _checkDeposit(\\n        address adapter,\\n        address pool,\\n        uint256 amount\\n    ) internal {\\n        address wrapped = IRouterAdapter(adapter).factoryToWMatic(\\n            IRouterAdapter(adapter).factory(pool)\\n        );\\n        if (wrapped == address(0)) {\\n            revert(\\\"No wrapped matic exists:from\\\");\\n        }\\n        IWETH(wrapped).deposit{value: amount}();\\n    }\\n\\n    function _checkWithdraw(\\n        address adapter,\\n        address pool,\\n        uint256 amount\\n    ) internal {\\n        address wrapped = IRouterAdapter(adapter).factoryToWMatic(\\n            IRouterAdapter(adapter).factory(pool)\\n        );\\n        if (wrapped == address(0)) {\\n            revert(\\\"No wrapped matic exists:to\\\");\\n        }\\n        IWETH(wrapped).withdraw(amount);\\n    }\\n\\n    function _deposit(\\n        address from,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (from == address(0)) {\\n            require(msg.value == amount, \\\"ETH_VALUE_WRONG\\\");\\n        } else {\\n            IApproveProxy(_APPROVE_PROXY_).claimTokens(token, from, address(this), amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3b274da5044b451e2b2467778125d663cc08acd970c9ded4e6b6e2d1072bafb\",\"license\":\"UNLICENSED\"},\"contracts/intf/IApprove.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\n\\ninterface IApprove {\\n    function claimTokens(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function getProxy() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0650722c0a8fd1e3ac6785524bf9a7c616072a64e2f62c8e42c30e399dff2870\",\"license\":\"UNLICENSED\"},\"contracts/intf/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x7c51e7939dd6576e536f88faf924b2aad57c2c22e70570038f880a92bf0574e6\",\"license\":\"UNLICENSED\"},\"contracts/lib/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev This is the Aave V2 DataTypes library.\\n */\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\",\"keccak256\":\"0xe93f49982f87028bb5ec463f3a65de4e3642753a19b9ae81274cae4f69b90d09\",\"license\":\"agpl-3.0\"},\"contracts/lib/InitializableOwnable.sol\":{\"content\":\"/*\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Ownable\\n * @author DODO Breeder\\n *\\n * @notice Ownership related functions\\n */\\ncontract InitializableOwnable {\\n    address public _OWNER_;\\n    address public _NEW_OWNER_;\\n    bool internal _INITIALIZED_;\\n\\n    // ============ Events ============\\n\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // ============ Modifiers ============\\n\\n    modifier notInitialized() {\\n        require(!_INITIALIZED_, \\\"IZN_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function initOwner(address newOwner) public notInitialized {\\n        _INITIALIZED_ = true;\\n        _OWNER_ = newOwner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\n        _NEW_OWNER_ = newOwner;\\n    }\\n\\n    function claimOwnership() public {\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\n        _OWNER_ = _NEW_OWNER_;\\n        _NEW_OWNER_ = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x77142d67a83056b2e19b13caf10457bf25523703761a90a23f217166d7ec5c56\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x294966673bde0ed88353f6fe022d55cc4ec42f08b0e48d1c3d19214e55924ff8\",\"license\":\"UNLICENSED\"},\"contracts/lib/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant _ETH_ADDRESS_ = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalApproveMax(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), to);\\n        if (allowance < amount) {\\n            token.safeApprove(to, type(uint256).max);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (token == _ETH_ADDRESS_);\\n    }\\n\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    function uniTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                (bool sent, ) = payable(to).call{value: amount}(\\\"\\\");\\n                require(sent, \\\"Failed_To_Transfer_ETH\\\");\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x26fce91ccd43e0454fc3cad2f0d0f3c4fd6d5d9c8d5416f85afd9e787ebae99e\",\"license\":\"MIT\"},\"contracts/lib/Withdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n    Ensures that any contract that inherits from this contract is able to\\n    withdraw funds that are accidentally received or stuck.\\n */\\n\\ncontract Withdrawable is Ownable {\\n    using SafeERC20 for IERC20;\\n    address constant ETHER = address(0);\\n\\n    event LogWithdraw(address indexed _from, address indexed _assetAddress, uint256 amount);\\n\\n    /**\\n     * @dev Withdraw asset.\\n     * @param _assetAddress Asset to be withdrawn.\\n     */\\n    function withdraw(address _assetAddress) public onlyOwner {\\n        uint256 assetBalance;\\n        if (_assetAddress == ETHER) {\\n            address self = address(this); // workaround for a possible solidity bug\\n            assetBalance = self.balance;\\n            payable(msg.sender).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\\n            IERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\\n        }\\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x1e6c2c6f538a400af4c74f6001bc9a38f0d1661742decd7342939f43ebb47e69\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "fortoon21",
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "This function must be called only be the LENDING_POOL and takes care of repaying active debt positions, migrating collateral and incurring new V2 debt token debt.",
        "params": {
          "amounts": "The array of flash loaned asset amounts used to repay debts.",
          "assets": "The array of flash loaned assets used to repay debts.",
          "initiator": "The address that initiated the flash loan, unused.",
          "params": "The byte array containing, in this case, the arrays of aTokens and aTokenAmounts.",
          "premiums": "The array of premiums incurred as additional debts."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw asset.",
        "params": {
          "_assetAddress": "Asset to be withdrawn."
        }
      }
    },
    "title": "RouteProxy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Split trading Need to wrap matic address in the following pool convention",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SmartRoute/proxies/RouteProxy.sol:RouteProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}